### START SERVER -------

sudo service ssh start
Password :123
start-all.sh
jps

### CHECK SERVER IN -------

localhost:9870

  ### Sample Input
Input File 1 (input1.txt):

apple, red
banana, yellow
orange, orange

Input File 2 (input2.txt): 

apple, fruit
banana, fruit
grape, fruit


Bash Commands : ---------

# Create input directories in HDFS and upload input files
hadoop fs -mkdir -p /user/sunny/input1
hadoop fs -mkdir -p /user/sunny/input2
hadoop fs -put input1.txt /user/sunny/input1/
hadoop fs -put input2.txt /user/sunny/input2/


Java Code Compilations and jar :

javac -classpath $(hadoop classpath) TwoWayJoin.java

jar -cvf TwoWayJoin.jar *.class


Hadoop Job : 


hadoop jar TwoWayJoin.jar TwoWayJoin /user/sunny/input1 /user/sunny/input2 /user/sunny/output_twowayjoin

Output View : 

hadoop fs -cat /user/sunny/output_twowayjoin/part-r-00000




Java Code Used : 


import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class TwoWayJoin {
    public static class MapClass extends Mapper<LongWritable, Text, Text, Text> {
        public void map(LongWritable key, Text value, Context context)
                throws IOException, InterruptedException {
            String[] tokens = value.toString().split(",\\s*");
            if (tokens.length == 2) {
                context.write(new Text(tokens[0]), new Text(tokens[1]));
            }
        }
    }

    public static class ReduceClass extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context)
                throws IOException, InterruptedException {
            Map<String, Integer> countMap = new HashMap<>();
            for (Text val : values) {
                String word = val.toString();
                countMap.put(word, countMap.getOrDefault(word, 0) + 1);
            }
            StringBuilder result = new StringBuilder();
            for (Map.Entry<String, Integer> entry : countMap.entrySet()) {
                result.append(entry.getKey()).append(":").append(entry.getValue()).append("\t");
            }
            context.write(key, new Text(result.toString()));
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "TwoWayJoin");

        job.setJarByClass(TwoWayJoin.class);
        job.setMapperClass(MapClass.class);
        job.setReducerClass(ReduceClass.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path("/user/sunny/output_twowayjoin")); // Hardcoded output directory

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}




Output : 

apple   red:1
banana  yellow:1
orange  orange:1
