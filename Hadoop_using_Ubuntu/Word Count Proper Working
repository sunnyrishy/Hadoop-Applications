### START SERVER -------

sudo service ssh start
Password :123
start-all.sh
jps

### CHECK SERVER IN -------

localhost:9870

echo "Hello Hadoop, this is a test file for WordCount" > test_input.txt

# Create an input directory
hadoop fs -mkdir -p /user/sunny/test_input

# Copy the text file to the input directory in HDFS
hadoop fs -put test_input.txt /user/sunny/test_input/

###    Compile the WordCount Java Code:
javac -classpath $(hadoop classpath) WordCount.java

###    Create a JAR file:
jar -cvf WordCount.jar *.class


###   Execute the MapReduce job
hadoop jar WordCount.jar WordCount /user/sunny/test_input /user/sunny/test_output


###    OUTPUT
hadoop fs -cat /user/sunny/test_output/part-r-00000



Code : 



import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

    public static class TokenizerMapper
            extends Mapper<Object, Text, Text, IntWritable> {

        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            while (itr.hasMoreTokens()) {
                word.set(itr.nextToken());
                context.write(word, one);
            }
        }
    }

    public static class IntSumReducer
            extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values,
                Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            result.set(sum);
            context.write(key, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");
        job.setJarByClass(WordCount.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        // Update the input path to your desired input directory in HDFS
        FileInputFormat.addInputPath(job, new Path("/user/sunny/test_input"));

        FileOutputFormat.setOutputPath(job, new Path("/user/sunny/test_output"));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}




Output : 

Hadoop, 1
Hello   1
WordCount       1
a       1
file    1
for     1
is      1
test    1
this    1

